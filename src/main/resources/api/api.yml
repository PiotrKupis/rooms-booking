openapi: 3.0.0
info:
    description: "Swagger API rest service"
    version: "1.0.0"
    title: "Swagger backend"
paths:
    /auth/register:
        post:
            tags:
                - "auth"
            summary: "Register an account"
            description: "Register an account"
            operationId: "register"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/registerRequest'
            responses:
                '201':
                    description: "Operation successful"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/userPayload'
                '400':
                    description: "Bad request"
                '409':
                    description: "Conflict"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /auth/login:
        post:
            tags:
                - "auth"
            summary: "Login with credentials"
            description: "Login with credentials"
            operationId: "login"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/loginRequest'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/authenticationResponse'
                '400':
                    description: "Bad request"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /auth/logout:
        post:
            tags:
                - "auth"
            summary: "Log out"
            description: "Log out"
            operationId: "logOut"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/refreshTokenPayload'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/refreshTokenPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /auth/refresh-token:
        post:
            tags:
                - "auth"
            summary: "Refresh a token"
            description: "Refresh a token"
            operationId: "refreshToken"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/refreshTokenPayload'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/authenticationResponse'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"
    /user:
        get:
            tags:
                - "user"
            summary: "Get all users"
            description: "Get all users"
            operationId: "getAllUsers"
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/userPayloadList'
                '400':
                    description: "Bad request"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /user/{email}/{role}:
        put:
            tags:
                - "user"
            summary: "Change user role"
            description: "Change user role"
            operationId: "changeRole"
            parameters:
                -   name: email
                    in: path
                    required: true
                    schema:
                        type: string
                        minLength: 5
                        maxLength: 200
                        pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                -   name: role
                    in: path
                    required: true
                    schema:
                        type: string
                        enum:
                            - ADMIN
                            - MODERATOR
                            - USER
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/userPayload'
                '400':
                    description: "Bad request"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /resort:
        post:
            tags:
                - "resort"
            summary: "Create a new resort"
            description: "Create a new resort"
            operationId: "createResort"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/resortPayload'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/resortPayload'
                '400':
                    description: "Bad request"
                '409':
                    description: "Conflict"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /resort/{resort-name}:
        get:
            tags:
                - "resort"
            summary: "Get resort by name"
            description: "Get resort by name"
            operationId: "getResortByName"
            parameters:
                -   name: resort-name
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/resortPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /resort/owner/{email}:
        get:
            tags:
                - "resort"
            summary: "Get resorts by owner email"
            description: "Get resorts by owner email"
            operationId: "getResortsByEmail"
            parameters:
                -   name: email
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/resortPayloadList'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /room:
        get:
            tags:
                - "room"
            summary: "Get all rooms"
            description: "Get all rooms"
            operationId: "getAllRooms"
            parameters:
                -   name: photo-quantity
                    in: query
                    schema:
                        type: integer
                        minimum: 1
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/detailedRoomPayloadList'
                '400':
                    description: "Bad request"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

        post:
            tags:
                - "room"
            summary: "Add a new room"
            description: "Add a new room"
            operationId: "createRoom"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/addRoomRequest'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/roomPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '409':
                    description: "Conflict"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /room/{resort-name}/{room-number}:
        get:
            tags:
                - "room"
            summary: "Get room with photos"
            description: "Get room with photos"
            operationId: "getRoom"
            parameters:
                -   name: resort-name
                    in: path
                    required: true
                    schema:
                        type: string
                -   name: room-number
                    in: path
                    required: true
                    schema:
                        type: integer
                        minimum: 1
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/detailedRoomPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /{resort-name}/{room-number}/photo:
        get:
            tags:
                - "photo"
            summary: "Get photos of a specific room"
            description: "Get photos of a specific room"
            operationId: "getRoomPhotos"
            parameters:
                -   name: resort-name
                    in: path
                    required: true
                    schema:
                        type: string
                -   name: room-number
                    in: path
                    required: true
                    schema:
                        type: integer
                        minimum: 1
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/photoPayloadList'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

        post:
            tags:
                - "photo"
            summary: "Add room photo"
            description: "Add room photo"
            operationId: "addRoomPhoto"
            parameters:
                -   name: resort-name
                    in: path
                    required: true
                    schema:
                        type: string
                -   name: room-number
                    in: path
                    required: true
                    schema:
                        type: integer
                        minimum: 1
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/addPhotoRequest'
            responses:
                '201':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/photoPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /search:
        post:
            tags:
                - "search"
            summary: "Search for specific rooms that meet requirements"
            description: "Search for specific rooms that meet requirements"
            operationId: "searchRooms"
            parameters:
                -   name: page-number
                    in: query
                    schema:
                        type: integer
                        minimum: 1
                -   name: rooms-per-page
                    in: query
                    schema:
                        type: integer
                        minimum: 1
                -   name: photos-per-room
                    in: query
                    schema:
                        type: integer
                        minimum: 1
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/searchPayload'
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/detailedRoomPayloadList'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /search/quantity:
        post:
            tags:
                - "search"
            summary: "Get number of rooms that meets requirements"
            description: "Get number of rooms that meets requirements"
            operationId: "getNumberOfFoundRooms"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/searchPayload'
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        text/plain:
                            schema:
                                type: string
                '400':
                    description: "Bad request"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

    /reservation:
        post:
            tags:
                - "reservation"
            summary: "Add reservation of the room"
            description: "Add reservation of the room"
            operationId: "addReservation"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/reservationPayload'
            responses:
                '200':
                    description: 'Operation successful'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/reservationPayload'
                '400':
                    description: "Bad request"
                '404':
                    description: "Not found"
                '500':
                    description: "Internal server error"
                '503':
                    description: "Database connection failed"

components:
    schemas:
        registerRequest:
            type: object
            properties:
                name:
                    type: string
                    minLength: 2
                    maxLength: 60
                surname:
                    type: string
                    minLength: 2
                    maxLength: 60
                password:
                    type: string
                    minLength: 5
                    maxLength: 200
                repeatedPassword:
                    type: string
                    minLength: 5
                    maxLength: 200
                email:
                    type: string
                    minLength: 5
                    maxLength: 200
                    pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                countryCode:
                    type: string
                    minLength: 1
                    maxLength: 4
                    pattern: '^[+]\d{1,3}$'
                phoneNumber:
                    type: string
                    minLength: 6
                    maxLength: 12
                    pattern: '^\d{6,12}$'
            required:
                - name
                - surname
                - password
                - repeatedPassword
                - email
                - countryCode
                - phoneNumber

        userPayload:
            type: object
            properties:
                name:
                    type: string
                    minLength: 2
                    maxLength: 60
                surname:
                    type: string
                    minLength: 2
                    maxLength: 60
                email:
                    type: string
                    minLength: 5
                    maxLength: 200
                    pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                role:
                    type: string
                    enum:
                        - ADMIN
                        - MODERATOR
                        - USER
            required:
                - name
                - surname
                - email
                - role

        loginRequest:
            type: object
            properties:
                email:
                    type: string
                    minLength: 5
                    maxLength: 200
                    pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                password:
                    type: string
                    minLength: 5
                    maxLength: 200
            required:
                - email
                - password

        authenticationResponse:
            type: object
            properties:
                authToken:
                    type: string
                refreshToken:
                    type: string
                expireDate:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum:
                        - ADMIN
                        - MODERATOR
                        - USER

        refreshTokenPayload:
            type: object
            properties:
                refreshToken:
                    type: string
                    minLength: 5
                    maxLength: 200
                email:
                    type: string
                    minLength: 5
                    maxLength: 200
            required:
                - refreshToken
                - email

        resortPayload:
            type: object
            properties:
                resortName:
                    type: string
                    minLength: 3
                    maxLength: 150
                country:
                    type: string
                    minLength: 4
                    maxLength: 80
                city:
                    type: string
                    minLength: 3
                    maxLength: 80
                street:
                    type: string
                    minLength: 3
                    maxLength: 100
                streetNumber:
                    type: string
                    minLength: 1
                    maxLength: 60
                resortAmenities:
                    type: array
                    items:
                        type: string
                        enum:
                            - BAR
                            - SAUNA
                            - GARDEN
                            - TERRACE
                            - JACUZZI
                            - HEATING
                            - FREE_WIFI
                            - SWIMMING_POOL
                            - PARKING
                smokingPermitted:
                    type: boolean
                animalsPermitted:
                    type: boolean
                partyPermitted:
                    type: boolean
                hotelDayStart:
                    type: string
                    pattern: '^\d{2}:\d{2}$'
                hotelDayEnd:
                    type: string
                    pattern: '^\d{2}:\d{2}$'
                isParkingAvailable:
                    type: boolean
                parkingFee:
                    type: string
                    minLength: 1
                    maxLength: 12
                    pattern: '^(\d+\.\d{1,2})|(\d{1,9})$'
                parkingFeeCurrency:
                    type: string
                    minLength: 3
                    maxLength: 3
                    pattern: '^[A-Z]{3}$'
            required:
                - resortName
                - country
                - city
                - street
                - streetNumber
                - resortAmenities
                - smokingPermitted
                - animalsPermited
                - partyPermitted
                - hotelDayStart
                - hotelDayEnd
                - daysOfFreeCancel
                - isParkingAvailable

        addRoomRequest:
            type: object
            properties:
                resortName:
                    type: string
                    minLength: 3
                    maxLength: 150
                roomNumber:
                    type: integer
                    minimum: 1
                price:
                    type: string
                    minLength: 1
                    maxLength: 12
                    pattern: '^(\d+\.\d{1,2})|(\d{1,9})$'
                priceCurrency:
                    type: string
                    minLength: 3
                    maxLength: 3
                    pattern: '^[A-Z]{3}$'
                roomAmenities:
                    type: array
                    items:
                        type: string
                        enum:
                            - AIR_CONDITIONING
                            - KITCHENETTE
                            - KITCHEN
                            - BALCONY
                            - TV
                            - WASHER
                            - NETFLIX
                            - PRIVATE_BATHROOM
                            - FRIDGE
                            - MICROWAVE
                            - IRON
                singleBedQuantity:
                    type: integer
                    minimum: 0
                doubleBedQuantity:
                    type: integer
                    minimum: 0
                kingSizeBedQuantity:
                    type: integer
                    minimum: 0
                maxResidentsNumber:
                    type: integer
                    minimum: 1

        roomPayload:
            type: object
            properties:
                resortName:
                    type: string
                country:
                    type: string
                city:
                    type: string
                street:
                    type: string
                streetNumber:
                    type: string
                roomNumber:
                    type: integer
                price:
                    type: string
                priceCurrency:
                    type: string
                roomAmenities:
                    type: array
                    items:
                        type: string
                singleBedQuantity:
                    type: integer
                doubleBedQuantity:
                    type: integer
                kingSizeBedQuantity:
                    type: integer
                maxResidentsNumber:
                    type: integer

        detailedRoomPayload:
            type: object
            properties:
                resortName:
                    type: string
                country:
                    type: string
                city:
                    type: string
                street:
                    type: string
                streetNumber:
                    type: string
                roomNumber:
                    type: integer
                price:
                    type: string
                priceCurrency:
                    type: string
                roomAmenities:
                    type: array
                    items:
                        type: string
                singleBedQuantity:
                    type: integer
                doubleBedQuantity:
                    type: integer
                kingSizeBedQuantity:
                    type: integer
                maxResidentsNumber:
                    type: integer
                photos:
                    $ref: '#/components/schemas/photoPayloadList'

        addPhotoRequest:
            type: object
            properties:
                data:
                    type: string
                    description: base64 image
                position:
                    type: integer
                    minimum: 1
            required:
                - data
                - position

        photoPayload:
            type: object
            properties:
                url:
                    type: string
                position:
                    type: integer
                    minimum: 1

        reservationPayload:
            type: object
            properties:
                resortName:
                    type: string
                    minLength: 3
                    maxLength: 150
                roomNumber:
                    type: integer
                    minimum: 1
                startDate:
                    type: string
                    pattern: '^\d{2}-\d{2}-\d{4}$'
                endDate:
                    type: string
                    pattern: '^\d{2}-\d{2}-\d{4}$'
                stripeToken:
                    type: string
                    minLength: 3
                    maxLength: 40
            required:
                - resortName
                - roomNumber
                - startDate
                - endDate
                - stripeToken

        searchPayload:
            type: object
            properties:
                location:
                    type: string
                    minLength: 3
                    maxLength: 80
                residentsNumber:
                    type: integer
                    minimum: 1
                startDate:
                    type: string
                    pattern: '^\d{2}-\d{2}-\d{4}$'
                endDate:
                    type: string
                    pattern: '^\d{2}-\d{2}-\d{4}$'
            required:
                - location
                - residentsNumber
                - startDate
                - endDate

        userPayloadList:
            type: array
            items:
                $ref: '#/components/schemas/userPayload'

        resortPayloadList:
            type: array
            items:
                $ref: '#/components/schemas/resortPayload'

        roomPayloadList:
            type: array
            items:
                $ref: '#/components/schemas/roomPayload'

        detailedRoomPayloadList:
            type: array
            items:
                $ref: '#/components/schemas/detailedRoomPayload'

        photoPayloadList:
            type: array
            items:
                $ref: '#/components/schemas/photoPayload'
